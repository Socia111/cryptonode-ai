import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface TelegramMessage {
  signal_id: string
  token: string
  direction: 'LONG' | 'SHORT'
  entry_price: number
  confidence_score: number
  atr?: number
  sl?: number
  tp?: number
  hvp?: number
  indicators?: {
    adx?: number
    stoch_k?: number
    volume_spike?: boolean
  }
  is_premium?: boolean
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { signal } = await req.json()
    
    if (!signal) {
      return new Response(
        JSON.stringify({ error: 'Signal data required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Send to free channel (Aiatethecoin bot)
    await sendToFreeChannel(signal)
    
    // Send to paid channel if premium signal or high confidence
    if (signal.is_premium || signal.confidence_score > 85) {
      await sendToPaidChannel(signal)
    }
    
    // Log notification
    await supabase
      .from('telegram_notifications')
      .insert({
        signal_id: signal.signal_id,
        message_type: 'signal_alert',
        sent_at: new Date().toISOString(),
        confidence_score: signal.confidence_score
      })

    return new Response(
      JSON.stringify({ success: true, message: 'Telegram alert sent successfully' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})

async function sendToFreeChannel(signal: TelegramMessage) {
  const telegramToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
  const chatId = Deno.env.get('TELEGRAM_CHAT_ID')
  
  if (!telegramToken || !chatId) return

  const direction = signal.direction === 'LONG' ? '🟢 LONG' : '🔴 SHORT'
  const confidenceEmoji = getConfidenceEmoji(signal.confidence_score)
  const strengthEmoji = getStrengthEmoji(signal.confidence_score)

  const message = `
*🚀 AItradeX1 Signal Alert*

${direction} *${signal.token}*
${confidenceEmoji} *Score: ${signal.confidence_score.toFixed(1)}%* ${strengthEmoji}

💰 *Entry:* \`$${signal.entry_price.toFixed(4)}\`
${signal.sl ? `🛑 *Stop Loss:* \`$${signal.sl.toFixed(4)}\`` : ''}
${signal.tp ? `🎯 *Take Profit:* \`$${signal.tp.toFixed(4)}\`` : ''}

📊 *Technical Indicators:*
${signal.indicators?.adx ? `• ADX: ${signal.indicators.adx.toFixed(1)}` : ''}
${signal.indicators?.stoch_k ? `• Stoch %K: ${signal.indicators.stoch_k.toFixed(1)}` : ''}
${signal.hvp ? `• HVP: ${signal.hvp.toFixed(1)}%` : ''}
${signal.indicators?.volume_spike ? '• 📈 Volume Spike Detected' : ''}

⚡ *Real-time signal from live market data*
🤖 Generated by AItradeX1 Algorithm

⚠️ *Risk Warning:* This is not financial advice. Trade at your own risk.
  `.trim()

  await sendTelegramMessage(telegramToken, chatId, message)
}

async function sendToPaidChannel(signal: TelegramMessage) {
  const telegramToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
  const premiumChatId = Deno.env.get('TELEGRAM_PREMIUM_CHAT_ID')
  
  if (!telegramToken || !premiumChatId) return

  const direction = signal.direction === 'LONG' ? '🟢 LONG' : '🔴 SHORT'
  const riskLevel = getRiskLevel(signal.confidence_score)
  const riskEmoji = getRiskEmoji(riskLevel)

  const message = `
*💎 PREMIUM AItradeX1 Signal*

${direction} *${signal.token}* ${riskEmoji}
⭐ *Confidence: ${signal.confidence_score.toFixed(1)}%*

💰 *Entry Range:* \`$${signal.entry_price.toFixed(4)}\`
🛑 *Stop Loss:* \`$${signal.sl?.toFixed(4) || 'N/A'}\`
🎯 *Take Profit:* \`$${signal.tp?.toFixed(4) || 'N/A'}\`
${signal.atr ? `📏 *ATR:* \`${signal.atr.toFixed(4)}\`` : ''}

📊 *Advanced Analytics:*
${signal.indicators?.adx ? `• ADX Strength: ${signal.indicators.adx.toFixed(1)}` : ''}
${signal.indicators?.stoch_k ? `• Stochastic: ${signal.indicators.stoch_k.toFixed(1)}` : ''}
${signal.hvp ? `• Volatility Percentile: ${signal.hvp.toFixed(1)}%` : ''}
${signal.indicators?.volume_spike ? '• 🚀 Volume Breakout Confirmed' : ''}

⚡ *Risk Level:* ${riskLevel}
📈 *R:R Ratio:* ${calculateRiskReward(signal)}

🔥 *This is a PREMIUM high-confidence signal*
⚠️ *Manage your risk accordingly*
  `.trim()

  await sendTelegramMessage(telegramToken, premiumChatId, message)
}

async function sendTelegramMessage(token: string, chatId: string, message: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(`Telegram API error: ${error}`)
    }
  } catch (error) {
    console.error('Telegram send error:', error)
    throw error
  }
}

function getConfidenceEmoji(score: number): string {
  if (score >= 90) return '🔥'
  if (score >= 80) return '⚡'
  if (score >= 70) return '✨'
  return '📊'
}

function getStrengthEmoji(score: number): string {
  if (score >= 90) return '💪💪💪'
  if (score >= 80) return '💪💪'
  if (score >= 70) return '💪'
  return ''
}

function getRiskLevel(score: number): string {
  if (score >= 90) return 'LOW'
  if (score >= 80) return 'MEDIUM'
  if (score >= 70) return 'HIGH'
  return 'VERY HIGH'
}

function getRiskEmoji(riskLevel: string): string {
  switch (riskLevel) {
    case 'LOW': return '🟢'
    case 'MEDIUM': return '🟡'
    case 'HIGH': return '🟠'
    case 'VERY HIGH': return '🔴'
    default: return '⚪'
  }
}

function calculateRiskReward(signal: TelegramMessage): string {
  if (!signal.sl || !signal.tp || !signal.entry_price) {
    return 'N/A'
  }

  const risk = Math.abs(signal.entry_price - signal.sl)
  const reward = Math.abs(signal.tp - signal.entry_price)
  const ratio = reward / risk
  
  return `1:${ratio.toFixed(1)}`
}