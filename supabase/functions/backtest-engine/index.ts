import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.56.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface BacktestParams {
  symbol: string;
  strategy: string;
  timeframe: string;
  startDate: string;
  endDate: string;
  initialCapital: number;
  leverage: number;
  stopLoss: number;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîÑ Backtest Engine started');
    
    const params: BacktestParams = await req.json();
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Simulate backtest results for AItradeX1 strategy
    const simulateBacktest = () => {
      const trades = [];
      const startCapital = params.initialCapital || 10000;
      let currentCapital = startCapital;
      let winCount = 0;
      let lossCount = 0;
      
      // Generate realistic trade results
      for (let i = 0; i < 50; i++) {
        const isWin = Math.random() > 0.4; // 60% win rate
        const profit = isWin ? 
          Math.random() * 0.03 + 0.01 : // 1-4% profit
          -(Math.random() * 0.02 + 0.005); // 0.5-2.5% loss
        
        const tradeAmount = currentCapital * 0.02; // 2% risk per trade
        const pnl = tradeAmount * profit;
        currentCapital += pnl;
        
        if (isWin) winCount++;
        else lossCount++;
        
        trades.push({
          id: i + 1,
          timestamp: new Date(Date.now() - (50 - i) * 24 * 60 * 60 * 1000).toISOString(),
          direction: Math.random() > 0.5 ? 'LONG' : 'SHORT',
          entry_price: 50000 + Math.random() * 20000,
          exit_price: 50000 + Math.random() * 20000,
          pnl: pnl,
          pnl_percentage: profit * 100,
          status: isWin ? 'WIN' : 'LOSS'
        });
      }
      
      const totalReturn = ((currentCapital - startCapital) / startCapital) * 100;
      const winRate = (winCount / (winCount + lossCount)) * 100;
      const maxDrawdown = Math.random() * 15 + 5; // 5-20%
      const sharpeRatio = Math.random() * 1.5 + 0.5; // 0.5-2.0
      
      return {
        summary: {
          total_trades: trades.length,
          winning_trades: winCount,
          losing_trades: lossCount,
          win_rate: winRate,
          total_return: totalReturn,
          max_drawdown: maxDrawdown,
          sharpe_ratio: sharpeRatio,
          initial_capital: startCapital,
          final_capital: currentCapital,
          net_profit: currentCapital - startCapital
        },
        trades,
        performance_chart: trades.map((trade, index) => ({
          date: trade.timestamp,
          cumulative_pnl: trades.slice(0, index + 1).reduce((sum, t) => sum + t.pnl, 0),
          equity: startCapital + trades.slice(0, index + 1).reduce((sum, t) => sum + t.pnl, 0)
        }))
      };
    };

    const results = simulateBacktest();
    
    console.log(`‚úÖ Backtest completed: ${results.summary.total_trades} trades, ${results.summary.win_rate.toFixed(1)}% win rate`);

    return new Response(JSON.stringify({
      success: true,
      results,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Backtest Engine Error:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
});